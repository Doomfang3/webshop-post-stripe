{"version":3,"sources":["Shop.js","App.js","serviceWorker.js","index.js"],"names":["prices","banana","cucumber","stripeAuthHeader","Content-Type","Authorization","Shop","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCartChange","evt","preventDefault","cart","state","target","name","parseInt","value","setState","handleCartReset","handleSubmit","fetching","stripe","createToken","then","_ref","token","price","axios","post","qs","stringify","source","id","amount","currency","headers","resp","alert","concat","data","toLocaleString","style","catch","error","console","log","react_default","a","createElement","onSubmit","width","margin","padding","border","borderRadius","onClick","disabled","es","base","fontSize","type","Component","injectStripe","App","apiKey","src_Shop","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13252e24.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { CardElement } from \"react-stripe-elements\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport qs from \"query-string-object\";\nimport { injectStripe } from \"react-stripe-elements\";\n\nconst prices = {\n  banana: 150,\n  cucumber: 100\n};\n\nconst stripeAuthHeader = {\n  \"Content-Type\": \"application/x-www-form-urlencoded\",\n  Authorization: `Bearer rk_test_rks1txRZLytoWnos8PxS1LKM00W8yowPUV`\n};\n\nclass Shop extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fetching: false,\n      cart: {\n        banana: 0,\n        cucumber: 0\n      }\n    };\n  }\n\n  handleCartChange = evt => {\n    evt.preventDefault();\n    const cart = this.state.cart;\n    cart[evt.target.name] += parseInt(evt.target.value);\n    this.setState({ cart });\n  };\n\n  handleCartReset = evt => {\n    evt.preventDefault();\n    this.setState({ cart: { banana: 0, cucumber: 0 } });\n  };\n\n  handleSubmit = evt => {\n    evt.preventDefault();\n    this.setState({ fetching: true });\n    const cart = this.state.cart;\n\n    this.props.stripe\n      .createToken()\n      .then(({ token }) => {\n        const price =\n          cart.banana * prices.banana + cart.cucumber * prices.cucumber;\n        axios\n          .post(\n            `https://api.stripe.com/v1/charges`,\n            qs.stringify({\n              source: token.id,\n              amount: price,\n              currency: \"usd\"\n            }),\n            { headers: stripeAuthHeader }\n          )\n          .then(resp => {\n            this.setState({ fetching: false });\n            alert(\n              `Thank you for your purchase! You card has been charged with: ${(\n                resp.data.amount / 100\n              ).toLocaleString(\"en-US\", {\n                style: \"currency\",\n                currency: \"usd\"\n              })}`\n            );\n          })\n          .catch(error => {\n            this.setState({ fetching: false });\n            console.log(error);\n          });\n      })\n      .catch(error => {\n        this.setState({ fetching: false });\n        console.log(error);\n      });\n  };\n\n  render() {\n    const cart = this.state.cart;\n    const fetching = this.state.fetching;\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n        style={{\n          width: \"550px\",\n          margin: \"20px\",\n          padding: \"10px\",\n          border: \"2px solid lightseagreen\",\n          borderRadius: \"10px\"\n        }}\n      >\n        <div>\n          Banana{\" \"}\n          {(prices.banana / 100).toLocaleString(\"en-US\", {\n            style: \"currency\",\n            currency: \"usd\"\n          })}\n          :\n          <div>\n            <button name=\"banana\" value={1} onClick={this.handleCartChange}>\n              +\n            </button>\n            <button\n              name=\"banana\"\n              value={-1}\n              onClick={this.handleCartChange}\n              disabled={cart.banana <= 0}\n            >\n              -\n            </button>\n            {cart.banana}\n          </div>\n        </div>\n        <div>\n          Cucumber{\" \"}\n          {(prices.cucumber / 100).toLocaleString(\"en-US\", {\n            style: \"currency\",\n            currency: \"usd\"\n          })}\n          :\n          <div>\n            <button name=\"cucumber\" value={1} onClick={this.handleCartChange}>\n              +\n            </button>\n            <button\n              name=\"cucumber\"\n              value={-1}\n              onClick={this.handleCartChange}\n              disabled={cart.cucumber <= 0}\n            >\n              -\n            </button>\n            {cart.cucumber}\n          </div>\n        </div>\n        <button onClick={this.handleCartReset}>Reset Cart</button>\n        <div\n          style={{\n            width: \"450px\",\n            margin: \"10px\",\n            padding: \"5px\",\n            border: \"2px solid green\",\n            borderRadius: \"10px\"\n          }}\n        >\n          <CardElement style={{ base: { fontSize: \"18px\" } }} />\n        </div>\n        {!fetching ? (\n          <button\n            type=\"submit\"\n            disabled={cart.banana === 0 && cart.cucumber === 0}\n          >\n            Purchase\n          </button>\n        ) : (\n          \"Purchasing...\"\n        )}\n        Price:\n        {(\n          (cart.banana * prices.banana + cart.cucumber * prices.cucumber) /\n          100\n        ).toLocaleString(\"en-US\", { style: \"currency\", currency: \"usd\" })}\n      </form>\n    );\n  }\n}\n\nShop.propTypes = {\n  stripe: PropTypes.shape({\n    createToken: PropTypes.func.isRequired\n  }).isRequired\n};\n\nexport default injectStripe(Shop);\n","import React from \"react\";\nimport { StripeProvider, Elements } from \"react-stripe-elements\";\nimport Shop from \"./Shop\";\n\nconst App = () => {\n  return (\n    <StripeProvider apiKey=\"pk_test_BT5vh9BIRdTxfPMubPv0xumE\">\n      <Elements>\n        <Shop />\n      </Elements>\n    </StripeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}